@model codeRR.Server.Web.Models.Wizard.ApplicationViewModel
@{
    ViewData["Title"] = "Create a new application";
    Layout = "_Layout.cshtml";
}
@section css {
    <style>
        html, body {
            height: 90%;
        }

        .footer-4, .navbar {
            display: none;
        }
    </style>
}
<div class="container">
    <div class="row">
        <div class="col-md-6 mx-auto">
            <h1>Create application</h1>
            @if (ViewBag.FirstApplication)
            {
                <p>It's time to create an application. "Application", in codeRR language, means an error reporting entity. </p>
                <p>
                    If you have a client/server based product named "l33tApp" you would typically create two applications in codeRR:

                </p>
                <ul>
                    <li>l33tApp Client</li>
                    <li>l33tApp Server</li>
                </ul>
                <p>
                    By doing so it's really
                    easy to see which errors belongs to which part of the product.
                    Specify the name of your first application, you'll be able to add more applications later.
                </p>
            }
            <form id="createMyAppForm">
                <div class="form-group">
                    <input type="text" name="Name" placeholder="Application name" class="form-control" />
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Create</button>
                    <a href="http://discuss.coderrapp.com" target="_self">Help</a> |
                    <a href="@Url.Content("~/")#/">Exit wizard</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        function createMyApplication(name, callback) {
            var hostType = 'DesktopApplication';

            var client = new Griffin.Net.HttpClient();
            client.get(window.API_URL + '/guid')
                .done(function (response) {
                    var appKey = response.body;
                    var cmd = new codeRR.Core.Applications.Commands.CreateApplication(name, hostType);
                    cmd.ApplicationKey = appKey;
                    Griffin.Cqs.CqsClient.command(cmd)
                        .done(function () {
                            callback(appKey);
                        })
                        .fail(function (rejection) {
                            console.log(rejection.message);
                        });
                });
        }

        function checkForApplication(appKey, foundCallback, notFoundCallback) {
            var query = new codeRR.Core.Applications.Queries.GetApplicationIdByKey(appKey);
            Griffin.Cqs.CqsClient.query(query)
                .done(function (result) {
                    if (!result) {
                        notFoundCallback();
                    } else {
                        foundCallback(result);
                    }
                });
        }

        var timer = null;
        var attemptsLeft = 5;
        $('#createMyAppForm').submit(function(e) {
            e.preventDefault();
            var name = $('input[name="Name"]', this).val();
            createMyApplication(name,
                function (appKey) {
                    timer = setInterval(function() {

                            checkForApplication(appKey,
                                function (app) {
                                    var nextPage = '@Url.Content("~/#/application/")' + app.Id + '/';
                                    if (@ViewBag.FirstApplication.ToString().ToLower()) {
                                        nextPage = '@Url.Action("Packages")?applicationId=' + app.Id;
                                    }
                                    window.location = '@Url.Content("~/account/UpdateSession")?returnUrl=' +
                                        encodeURIComponent(nextPage);
                                },
                                function() {
                                    attemptsLeft = attemptsLeft - 1;
                                    console.log(attemptsLeft);
                                    if (attemptsLeft <= 0) {
                                        clearInterval(timer);
                                        humane.log('Failed to create application :(');
                                    }
                                });
                        },
                        500);

                });
        });

    </script>
}
